#!/usr/bin/env ruby
require 'shellwords'
require 'fileutils'
require 'yaml'
require 'open-uri'
require 'digest/md5'
require 'base64'
require 'cgi'

class Casher
  include FileUtils

  def initialize
    @casher_dir = ENV['CASHER_DIR'] || File.expand_path(".casher", ENV["HOME"])
    @mtime_file = File.expand_path('mtime.yml', @casher_dir)
    @md5_file   = File.expand_path('md5.yml',   @casher_dir)
    @fetch_tar  = File.expand_path('fetch.tgz', @casher_dir)
    @push_tar   = File.expand_path('push.tgz',  @casher_dir)
    @mtimes     = File.exist?(@mtime_file) ? YAML.load_file(@mtime_file) : {}
    mkdir_p @casher_dir
  end

  def run(command, *arguments)
    raise "unknown command" unless %w[fetch add push].include? command
    send(command, *arguments)
  end

  def split_tar()
    cmd = "split -a 8 -b 4m push.tgz push.tgz."
    Dir.chdir(@casher_dir) do
      unless system(cmd)
        puts "could not split archive to chunks"
        return []
      end

      files = Dir.glob("#{@push_tar}.*").map do |chunk|
        [chunk, Base64.strict_encode64(Digest::MD5.file(chunk).hexdigest)]
      end

      files.sort_by(&:first)
    end
  end

  def fetch_body(url)
    begin
      puts "Fetch from url: #{url}"
      open(url) {|io| io.gets }
    rescue Exception => e
      $stderr.puts "#{e.class} - #{e.message}"
    end
  end

  def fetch(*urls)
    puts "attempting to download cache archive"
    res =  urls.any? do |url|
      new_url = fetch_body(url)
      if new_url
        cmd =  "curl -m 30 -L --tcp-nodelay -f -s %p -o %p >#{@casher_dir}/fetch.log 2>#{@casher_dir}/fetch.err.log" % [new_url, @fetch_tar]
        system cmd
      end
    end

    if res
      puts "found cache"
      puts "extracting checksums"
      tar(:x, @fetch_tar, @md5_file) { puts "checksums not yet calculated, skipping" }
    else
      puts "could not download cache"
      if File.exist? @fetch_tar
        rm @fetch_tar
      end
    end
  end

  def add(*paths)
    paths.each do |path|
      path = File.expand_path(path)
      puts "adding #{path} to cache"
      mkdir_p path
      tar(:x, @fetch_tar, path) { puts "#{path} is not yet cached" }
      @mtimes[path] = Time.now.to_i
    end
    File.open(@mtime_file, 'w') { |f| f << @mtimes.to_yaml }
  end

  def push_chunks(url)
    chunks = split_tar
    cmd = "curl -XPUT -H \"x-ms-blob-type: BlockBlob\" -s -S -m 60 -d \"\" %p" % [url]
    unless system(cmd)
      return false
    end

    print "uploading chunks to url: #{url}"

    re = chunks.all? do |file, md5|
      chunk_url = "#{url}&comp=block&blockid=#{CGI.escape md5}"
      cmd = "curl -s -S -m 60 -T %p %p" % [file, chunk_url]
      print "."
      system cmd
    end

    print(re ? " OK\n" : " FAIL\n")
    return false unless re

    commit_chunks(chunks, url)
  end

  def commit_chunks(chunks, url)
    xml =  %{<?xml version="1.0" encoding="utf-8"?>\n}
    xml << %{<BlockList>\n}
    chunks.each do |_, md5|
      xml << %{<Latest>#{md5}</Latest>\n}
    end
    xml << %{</BlockList>\n}
    File.open("#{@casher_dir}/chunks.xml", 'w') {|io| io.write xml }

    print "commiting chunks "
    cmd = "curl -s -S -m 60 -H \"x-ms-version: 2011-08-18\" -T %p %p" % ["#{@casher_dir}/chunks.xml", "#{url}&comp=blocklist"]
    re = system(cmd)
    print(re ? "OK\n" : "FAIL\n")
    re
  end

  def push(url)
    if changed?
      puts "changes detected, packing new archive"
      store_md5
      tar(:c, @push_tar, @md5_file, *@mtimes.keys)
      new_url = fetch_body(url)
      if new_url
        push_chunks(new_url)
      else
        puts "failed to retrieve cache url"
      end
    else
      puts "nothing changed, not updating cache"
    end
  end

  def changed?
    return true unless File.exist? @fetch_tar
    each_file do |file, mtime|
      next if unchanged? file, mtime
      puts "#{file} was modified"
      return true
    end
    return false
  end

  def md5sums
    @md5sums ||= File.exist?(@md5_file) ? YAML.load_file(@md5_file) : {}
  end

  def md5(file)
    sum = `md5sum #{Shellwords.escape(file)}`.split(" ", 2).first
    sum.to_s.empty? ? Time.now.to_i : sum
  end

  def each_file
    @mtimes.each do |path, mtime|
      Dir.glob("#{path}/**/*") do |file|
        yield file, mtime unless File.directory?(file)
      end
    end
  end

  def unchanged?(file, mtime)
    return false unless md5sums[file]
    return true  if unchanged_mtime?(file, mtime)
    md5sums[file] == md5(file)
  end

  def unchanged_mtime?(file, mtime)
    File.mtime(file).to_i <= mtime
  end

  def store_md5
    $stdout.print "calculating checksums "
    $stdout.flush
    new_md5sums = {}
    each_file do |file, mtime|
      if unchanged_mtime?(file, mtime) && md5sums.include?(file)
        new_md5sums[file] = md5sums[file]
      else
        #$stdout.print '.'
        #$stdout.flush
        new_md5sums[file] = md5(file)
      end
    end
    $stdout.puts
    File.open(@md5_file, 'w') { |f| f << new_md5sums.to_yaml }
  end

  def tar(flag, file, *args, &block)
    command = "tar -Pz#{flag}f #{Shellwords.escape(file)} #{Shellwords.join(args)}"
    block ||= proc { puts "FAILED: #{command}", File.read("#{@casher_dir}/tar.err.log"), File.read("#{@casher_dir}/tar.log") }
    block.call unless system "#{command} 2>#{@casher_dir}/tar.err.log >#{@casher_dir}/tar.log"
  end
end

Casher.new.run(*ARGV) if $0 == __FILE__
